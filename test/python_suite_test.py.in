#!@PYTHON_EXECUTABLE@
# -*- coding: utf-8 -*-
##
## Copyright 2015-2016 Hans Dembinski
##
## Distributed under the Boost Software License, Version 1.0.
## (See accompanying file LICENSE_1_0.txt
## or copy at http://www.boost.org/LICENSE_1_0.txt)

import unittest
from math import pi
from histogram import histogram, regular_axis, circular_axis, \
                      variable_axis, category_axis, integer_axis
import pickle
import os
if @PYTHON_VERSION_MAJOR@ == 3:
    from io import BytesIO
else:
    from StringIO import StringIO as BytesIO

have_numpy = "@HAVE_NUMPY@"
if have_numpy:
    import numpy

class test_regular_axis(unittest.TestCase):

    def test_init(self):
        regular_axis(1, 1.0, 2.0)
        regular_axis(1, 1.0, 2.0, label="ra")
        regular_axis(1, 1.0, 2.0, uoflow=False)
        regular_axis(1, 1.0, 2.0, label="ra", uoflow=False)
        with self.assertRaises(TypeError):
            regular_axis()
        with self.assertRaises(TypeError):
            regular_axis(1)
        with self.assertRaises(TypeError):
            regular_axis(1, 1.0)
        with self.assertRaises(RuntimeError):
            regular_axis(0, 1.0, 2.0)
        with self.assertRaises(TypeError):
            regular_axis("1", 1.0, 2.0)
        with self.assertRaises(Exception):
            regular_axis(-1, 1.0, 2.0)
        with self.assertRaises(RuntimeError):
            regular_axis(1, 2.0, 1.0)
        with self.assertRaises(TypeError):
            regular_axis(1, 1.0, 2.0, label=0)
        with self.assertRaises(TypeError):
            regular_axis(1, 1.0, 2.0, label="ra", uoflow="True")
        with self.assertRaises(TypeError):
            regular_axis(1, 1.0, 2.0, bad_keyword="ra")
        a = regular_axis(4, 1.0, 2.0)
        self.assertEqual(a, regular_axis(4, 1.0, 2.0))
        self.assertNotEqual(a, regular_axis(3, 1.0, 2.0))
        self.assertNotEqual(a, regular_axis(4, 1.1, 2.0))
        self.assertNotEqual(a, regular_axis(4, 1.0, 2.1))

    def test_len(self):
        a = regular_axis(4, 1.0, 2.0)
        self.assertEqual(len(a), 5)

    def test_repr(self):
        for s in ("regular_axis(4, 1.1, 2.2)",
                  "regular_axis(4, 1.1, 2.2, label='ra')",
                  "regular_axis(4, 1.1, 2.2, uoflow=False)",
                  "regular_axis(4, 1.1, 2.2, label='ra', uoflow=False)"):
            self.assertEqual(str(eval(s)), s)

    def test_getitem(self):
        v = [1.0, 1.25, 1.5, 1.75, 2.0]
        a = regular_axis(4, 1.0, 2.0)
        for i in range(5):
            self.assertEqual(a[i], v[i])

    def test_iter(self):
        v = [1.0, 1.25, 1.5, 1.75, 2.0]
        a = regular_axis(4, 1.0, 2.0)
        self.assertEqual([x for x in a], v)

    def test_index(self):
        a = regular_axis(4, 1.0, 2.0)
        self.assertEqual(a.index(-1), -1)
        self.assertEqual(a.index(0.99), -1)
        self.assertEqual(a.index(1.0), 0)
        self.assertEqual(a.index(1.1), 0)
        self.assertEqual(a.index(1.249), 0)
        self.assertEqual(a.index(1.250), 1)
        self.assertEqual(a.index(1.499), 1)
        self.assertEqual(a.index(1.500), 2)
        self.assertEqual(a.index(1.749), 2)
        self.assertEqual(a.index(1.750), 3)
        self.assertEqual(a.index(1.999), 3)
        self.assertEqual(a.index(2.000), 4)
        self.assertEqual(a.index(2.1), 4)
        self.assertEqual(a.index(20), 4)

class test_circular_axis(unittest.TestCase):

    def test_init(self):
        circular_axis(1)
        circular_axis(4, 1.0)
        circular_axis(4, 1.0, label="pa")
        with self.assertRaises(TypeError):
            circular_axis()
        with self.assertRaises(Exception):
            circular_axis(-1)
        with self.assertRaises(TypeError):
            circular_axis(4, 1.0, uoflow=True)
        with self.assertRaises(TypeError):
            circular_axis(1, 1.0, 2.0, 3.0)
        with self.assertRaises(TypeError):
            circular_axis(1, 1.0, label=1)
        with self.assertRaises(TypeError):
            circular_axis("1")
        a = circular_axis(4, 1.0)
        self.assertEqual(a, circular_axis(4, 1.0))
        self.assertNotEqual(a, circular_axis(2, 1.0))
        self.assertNotEqual(a, circular_axis(4, 0.0))

    def test_len(self):
        self.assertEqual(len(circular_axis(4)), 5)
        self.assertEqual(len(circular_axis(4, 1.0)), 5)

    def test_repr(self):
        for s in ("circular_axis(4)",
                  "circular_axis(4, phase=1)",
                  "circular_axis(4, phase=1, label='x')",
                  "circular_axis(4, label='x')"):
            self.assertEqual(str(eval(s)), s)

    def test_getitem(self):
        v = [1.0, 1.0 + 0.5 * pi, 1.0 + pi, 1.0 + 1.5 *pi, 1.0 + 2.0 * pi]
        a = circular_axis(4, 1.0)
        for i in range(5):
            self.assertEqual(a[i], v[i])

    def test_iter(self):
        a = circular_axis(4, 1.0)
        v = [1.0, 1.0 + 0.5 * pi, 1.0 + pi, 1.0 + 1.5 *pi, 1.0 + 2.0 * pi]
        self.assertEqual([x for x in a], v)

    def test_index(self):
        a = circular_axis(4, 1.0)
        d = 0.5 * pi
        self.assertEqual(a.index(0.99 - 4*d), 3)
        self.assertEqual(a.index(0.99 - 3*d), 0)
        self.assertEqual(a.index(0.99 - 2*d), 1)
        self.assertEqual(a.index(0.99 - d), 2)
        self.assertEqual(a.index(0.99), 3)
        self.assertEqual(a.index(1.0), 0)
        self.assertEqual(a.index(1.01), 0)
        self.assertEqual(a.index(0.99 + d), 0)
        self.assertEqual(a.index(1.0 + d), 1)
        self.assertEqual(a.index(1.0 + 2*d), 2)
        self.assertEqual(a.index(1.0 + 3*d), 3)
        self.assertEqual(a.index(1.0 + 4*d), 0)
        self.assertEqual(a.index(1.0 + 5*d), 1)

class test_variable_axis(unittest.TestCase):

    def test_init(self):
        variable_axis(0, 1)
        variable_axis(1, -1)
        variable_axis(0, 1, 2, 3, 4)
        variable_axis(0, 1, label="va")
        variable_axis(0, 1, uoflow=True)
        variable_axis(0, 1, label="va", uoflow=True)
        with self.assertRaises(TypeError):
            variable_axis()
        with self.assertRaises(RuntimeError):
            variable_axis(1.0)
        with self.assertRaises(TypeError):
            variable_axis("1", 2)
        with self.assertRaises(KeyError):
            variable_axis(0.0, 1.0, 2.0, bad_keyword="ra")
        a = variable_axis(-0.1, 0.2, 0.3)
        self.assertEqual(a, variable_axis(-0.1, 0.2, 0.3))
        self.assertNotEqual(a, variable_axis(0, 0.2, 0.3))
        self.assertNotEqual(a, variable_axis(-0.1, 0.1, 0.3))
        self.assertNotEqual(a, variable_axis(-0.1, 0.1))

    def test_len(self):
        self.assertEqual(len(variable_axis(-0.1, 0.2, 0.3)), 3)

    def test_repr(self):
        for s in ("variable_axis(-0.1, 0.2)",
                  "variable_axis(-0.1, 0.2, 0.3)",
                  "variable_axis(-0.1, 0.2, 0.3, label='va')",
                  "variable_axis(-0.1, 0.2, 0.3, uoflow=False)",
                  "variable_axis(-0.1, 0.2, 0.3, label='va', uoflow=False)"):
            self.assertEqual(str(eval(s)), s)

    def test_getitem(self):
        v = [-0.1, 0.2, 0.3]
        a = variable_axis(*v)
        for i in range(3):
            self.assertEqual(a[i], v[i])

    def test_iter(self):
        v = [-0.1, 0.2, 0.3]
        a = variable_axis(*v)
        self.assertEqual([x for x in a], v)

    def test_index(self):
        a = variable_axis(-0.1, 0.2, 0.3)
        self.assertEqual(a.index(-10.0), -1)
        self.assertEqual(a.index(-0.11), -1)
        self.assertEqual(a.index(-0.1), 0)
        self.assertEqual(a.index(0.0), 0)
        self.assertEqual(a.index(0.19), 0)
        self.assertEqual(a.index(0.2), 1)
        self.assertEqual(a.index(0.21), 1)
        self.assertEqual(a.index(0.29), 1)
        self.assertEqual(a.index(0.3), 2)
        self.assertEqual(a.index(0.31), 2)
        self.assertEqual(a.index(10), 2)

class test_category_axis(unittest.TestCase):

    def test_init(self):
        category_axis("A", "B", "C")
        category_axis("A", "B", "C", label="ca")
        with self.assertRaises(TypeError):
            category_axis()
        with self.assertRaises(TypeError):
            category_axis(1)
        with self.assertRaises(TypeError):
            category_axis("1", 2)
        with self.assertRaises(TypeError):
            category_axis("A", "B", label=1)
        with self.assertRaises(KeyError):
            category_axis("A", "B", "C", uoflow=True)
        self.assertEqual(category_axis("A", "B", "C"),
                         category_axis("A", "B", "C"))

    def test_len(self):
        a = category_axis("A", "B", "C")
        self.assertEqual(len(a), 3)

    def test_repr(self):
        for s in ("category_axis('A')",
                  "category_axis('A', 'B')",
                  "category_axis('A', 'B', 'C')"):
            self.assertEqual(str(eval(s)), s)

    def test_getitem(self):
        c = "A", "B", "C"
        a = category_axis(*c)
        for i in range(3):
            self.assertEqual(a[i], c[i])

    def test_iter(self):
        c = ["A", "B", "C"]
        self.assertEqual([x for x in category_axis(*c)], c)

class test_integer_axis(unittest.TestCase):

    def test_init(self):
        integer_axis(-1, 2)
        with self.assertRaises(TypeError):
            integer_axis()
        with self.assertRaises(TypeError):
            integer_axis(1)
        with self.assertRaises(TypeError):
            integer_axis("1", 2)
        with self.assertRaises(RuntimeError):
            integer_axis(2, -1)
        with self.assertRaises(TypeError):
            integer_axis(1, 2, 3)
        self.assertEqual(integer_axis(-1, 2), integer_axis(-1, 2))
        self.assertNotEqual(integer_axis(-1, 2), integer_axis(-1, 2, label="ia"))
        self.assertNotEqual(integer_axis(-1, 2, uoflow=False),
                            integer_axis(-1, 2, uoflow=True))

    def test_len(self):
        self.assertEqual(len(integer_axis(-1, 2)), 4)

    def test_repr(self):
        for s in ("integer_axis(-1, 1)",
                  "integer_axis(-1, 1, label='ia')",
                  "integer_axis(-1, 1, uoflow=False)",
                  "integer_axis(-1, 1, label='ia', uoflow=False)"):
            self.assertEqual(str(eval(s)), s)

    def test_label(self):
        self.assertEqual(integer_axis(-1, 2, label="ia").label, "ia")

    def test_getitem(self):
        v = [-1, 0, 1, 2]
        a = integer_axis(-1, 2)
        for i in range(4):
            self.assertEqual(a[i], v[i])

    def test_iter(self):
        v = [x for x in integer_axis(-1, 2)]
        self.assertEqual(v, [-1, 0, 1, 2])

    def test_index(self):
        a = integer_axis(-1, 2)
        self.assertEqual(a.index(-3), -1)
        self.assertEqual(a.index(-2), -1)
        self.assertEqual(a.index(-1), 0)
        self.assertEqual(a.index(0), 1)
        self.assertEqual(a.index(1), 2)
        self.assertEqual(a.index(2), 3)
        self.assertEqual(a.index(3), 4)
        self.assertEqual(a.index(4), 4)

class histogramtest(unittest.TestCase):

    def test_init(self):
        histogram()
        histogram(integer_axis(-1, 1))
        with self.assertRaises(TypeError):
            histogram(1)
        with self.assertRaises(TypeError):
            histogram("bla")
        with self.assertRaises(TypeError):
            histogram([])
        with self.assertRaises(TypeError):
            histogram(regular_axis)
        with self.assertRaises(TypeError):
            histogram(regular_axis())
        with self.assertRaises(TypeError):
            histogram([integer_axis(-1, 1)])
        with self.assertRaises(RuntimeError):
            histogram(integer_axis(-1, 1), unknown_keyword="nh")

        h = histogram(integer_axis(-1, 1))
        self.assertEqual(len(h), 1)
        self.assertEqual(h.axis(0), integer_axis(-1, 1))
        self.assertEqual(h.axis(0).shape, 5)
        self.assertEqual(histogram(integer_axis(-1, 1, uoflow=False)).axis(0).shape, 3)
        self.assertNotEqual(h, histogram(regular_axis(1, -1, 1)))
        self.assertNotEqual(h, histogram(integer_axis(-1, 2)))
        self.assertNotEqual(h, histogram(integer_axis(-1, 1, label="ia")))

    def test_copy(self):
        a = histogram(integer_axis(-1, 1))
        import copy
        b = copy.copy(a)
        self.assertEqual(a, b)
        self.assertNotEqual(id(a), id(b))
        c = copy.deepcopy(b)
        self.assertEqual(b, c)
        self.assertNotEqual(id(b), id(c))

    def test_fill_1d(self):
        h0 = histogram(integer_axis(-1, 1, uoflow=False))
        h1 = histogram(integer_axis(-1, 1, uoflow=True))
        for h in (h0, h1):
            with self.assertRaises(RuntimeError):
                h.fill()
            with self.assertRaises(RuntimeError):
                h.fill(1, 2)
            h.fill(-10)
            h.fill(-1)
            h.fill(-1)
            h.fill(0)
            h.fill(1)
            h.fill(1)
            h.fill(1)
            h.fill(10)
        self.assertEqual(h0.sum, 6)
        self.assertEqual(h0.axis(0).shape, 3)
        self.assertEqual(h1.sum, 8)
        self.assertEqual(h1.axis(0).shape, 5)

        for h in (h0, h1):
            self.assertEqual(h.value(0), 2)
            self.assertEqual(h.value(1), 1)
            self.assertEqual(h.value(2), 3)
            with self.assertRaises(RuntimeError):
                h.value(0, 1)
            with self.assertRaises(RuntimeError):
                h.value(0, foo=None)
            self.assertEqual(h.variance(0), 2)
            self.assertEqual(h.variance(1), 1)
            self.assertEqual(h.variance(2), 3)
            with self.assertRaises(RuntimeError):
                h.variance(0, 1)
            with self.assertRaises(RuntimeError):
                h.variance(0, foo=None)

        self.assertEqual(h1.value(-1), 1)
        self.assertEqual(h1.value(3), 1)

    def test_growth(self):
        h = histogram(integer_axis(-1, 1))
        h.fill(-1)
        h.fill(1)
        h.fill(1)
        for i in range(255):
            h.fill(0)
        h.fill(0)
        for i in range(1000-256):
            h.fill(0)
        self.assertEqual(h.value(-1), 0)
        self.assertEqual(h.value(0), 1)
        self.assertEqual(h.value(1), 1000)
        self.assertEqual(h.value(2), 2)
        self.assertEqual(h.value(3), 0)

    def test_fill_2d(self):
        for uoflow in (False, True):
            h = histogram(integer_axis(-1, 1, uoflow=uoflow),
                           regular_axis(4, -2, 2, uoflow=uoflow))
            h.fill(-1, -2)
            h.fill(-1, -1)
            h.fill(0, 0)
            h.fill(0, 1)
            h.fill(1, 0)
            h.fill(3, -1)
            h.fill(0, -3)
            with self.assertRaises(Exception):
                h.fill(1)
            with self.assertRaises(Exception):
                h.fill(1, 2, 3)

            m = [[1, 1, 0, 0, 0, 0],
                 [0, 0, 1, 1, 0, 1],
                 [0, 0, 1, 0, 0, 0],
                 [0, 1, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0]]
            for i in range(-uoflow, h.axis(0).bins + uoflow):
                for j in range(-uoflow, h.axis(1).bins + uoflow):
                    self.assertEqual(h.value(i, j), m[i][j])

    def test_add_2d(self):
        for uoflow in (False, True):
            h = histogram(integer_axis(-1, 1, uoflow=uoflow),
                          regular_axis(4, -2, 2, uoflow=uoflow))
            h.fill(-1, -2)
            h.fill(-1, -1)
            h.fill(0, 0)
            h.fill(0, 1)
            h.fill(1, 0)
            h.fill(3, -1)
            h.fill(0, -3)

            m = [[1, 1, 0, 0, 0, 0],
                 [0, 0, 1, 1, 0, 1],
                 [0, 0, 1, 0, 0, 0],
                 [0, 1, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0]]

            h += h

            for i in range(-uoflow, h.axis(0).bins + uoflow):
                for j in range(-uoflow, h.axis(1).bins + uoflow):
                    self.assertEqual(h.value(i, j), 2 * m[i][j])
                    self.assertEqual(h.variance(i, j), 2 * m[i][j])

    def test_add_2d_bad(self):
        a = histogram(integer_axis(-1, 1))
        b = histogram(regular_axis(3, -1, 1))
        with self.assertRaises(RuntimeError):
            a += b

    def test_add_2d_w(self):
        for uoflow in (False, True):
            h = histogram(integer_axis(-1, 1, uoflow=uoflow),
                          regular_axis(4, -2, 2, uoflow=uoflow))
            h.fill(-1, -2)
            h.fill(-1, -1)
            h.fill(0, 0)
            h.fill(0, 1)
            h.fill(1, 0)
            h.fill(3, -1)
            h.fill(0, -3)

            m = [[1, 1, 0, 0, 0, 0],
                 [0, 0, 1, 1, 0, 1],
                 [0, 0, 1, 0, 0, 0],
                 [0, 1, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0]]

            h2 = histogram(integer_axis(-1, 1, uoflow=uoflow),
                           regular_axis(4, -2, 2, uoflow=uoflow))
            h2.fill(0, 0, w=0)

            h2 += h
            h2 += h
            h += h
            self.assertEqual(h, h2)

            for i in range(-uoflow, h.axis(0).bins + uoflow):
                for j in range(-uoflow, h.axis(1).bins + uoflow):
                    self.assertEqual(h.value(i, j), 2 * m[i][j])
                    self.assertEqual(h.variance(i, j), 2 * m[i][j])

    def test_axis_overflow(self):
        h = histogram(*[regular_axis(1, 0, 1) for i in range(50)])
        with self.assertRaises(RuntimeError):
            h.fill(*range(50))

        with self.assertRaises(RuntimeError):
            h.value(*range(50))

        with self.assertRaises(RuntimeError):
            h.variance(*range(50))

    def test_pickle_0(self):
        a = histogram(category_axis('A', 'B', 'C'),
                      integer_axis(0, 20, label='ia'),
                      regular_axis(20, 0.0, 20.0, uoflow=False),
                      variable_axis(0.0, 1.0, 2.0),
                      circular_axis(4, label='pa'))
        for i in range(a.axis(0).bins):
            a.fill(i, 0, 0, 0, 0)
            for j in range(a.axis(1).bins):
                a.fill(i, j, 0, 0, 0)
                for k in range(a.axis(2).bins):
                    a.fill(i, j, k, 0, 0)
                    for l in range(a.axis(3).bins):
                        a.fill(i, j, k, l, 0)
                        for m in range(a.axis(4).bins):
                            a.fill(i, j, k, l, m * 0.5 * pi)

        io = BytesIO()
        pickle.dump(a, io)
        io.seek(0)
        b = pickle.load(io)
        self.assertNotEqual(id(a), id(b))
        self.assertEqual(len(a), len(b))
        self.assertEqual(a.axis(0), b.axis(0))
        self.assertEqual(a.axis(1), b.axis(1))
        self.assertEqual(a.axis(2), b.axis(2))
        self.assertEqual(a.axis(3), b.axis(3))
        self.assertEqual(a.axis(4), b.axis(4))
        self.assertEqual(a.sum, b.sum)
        self.assertEqual(a, b)

    def test_pickle_1(self):
        a = histogram(category_axis('A', 'B', 'C'),
                       integer_axis(0, 3, label='ia'),
                       regular_axis(4, 0.0, 4.0, uoflow=False),
                       variable_axis(0.0, 1.0, 2.0))
        for i in range(a.axis(0).bins):
            a.fill(i, 0, 0, 0, w=3)
            for j in range(a.axis(1).bins):
                a.fill(i, j, 0, 0, w=10)
                for k in range(a.axis(2).bins):
                    a.fill(i, j, k, 0, w=2)
                    for l in range(a.axis(3).bins):
                        a.fill(i, j, k, l, w=5)

        io = BytesIO()
        pickle.dump(a, io)
        io.seek(0)
        b = pickle.load(io)
        self.assertNotEqual(id(a), id(b))
        self.assertEqual(len(a), len(b))
        self.assertEqual(a.axis(0), b.axis(0))
        self.assertEqual(a.axis(1), b.axis(1))
        self.assertEqual(a.axis(2), b.axis(2))
        self.assertEqual(a.axis(3), b.axis(3))
        self.assertEqual(a.sum, b.sum)
        self.assertEqual(a, b)

    @unittest.skipUnless(have_numpy, "requires build with numpy-support")
    def test_numpy_conversion_0(self):
        a = histogram(integer_axis(0, 2, uoflow=False))
        for i in range(100):
            a.fill(1)
        c = numpy.array(a) # a copy
        v = numpy.asarray(a) # a view

        for t in (c, v):
            self.assertEqual(t.dtype, numpy.uint8)
            self.assertTrue(numpy.all(t == numpy.array((0, 100, 0))))

        for i in range(100):
            a.fill(1)
        self.assertTrue(numpy.all(c == numpy.array((0, 100, 0))))
        self.assertTrue(numpy.all(v == numpy.array((0, 200, 0))))

        for i in range(100):
            a.fill(1)
        c = numpy.array(a)
        self.assertEqual(c.dtype, numpy.uint16)
        self.assertTrue(numpy.all(c == numpy.array((0, 300, 0))))
        # view does not follow underlying switch in word size
        self.assertFalse(numpy.all(c == v))

    @unittest.skipUnless(have_numpy, "requires build with numpy-support")
    def test_numpy_conversion_1(self):
        a = histogram(integer_axis(0, 2))
        for i in range(10):
            a.fill(1, w=3)
        c = numpy.array(a) # a copy
        v = numpy.asarray(a) # a view
        self.assertEqual(c.dtype, numpy.float64)
        self.assertTrue(numpy.all(c == numpy.array(((0, 30, 0, 0, 0), (0, 90, 0, 0, 0)))))
        self.assertTrue(numpy.all(v == c))

    @unittest.skipUnless(have_numpy, "requires build with numpy-support")
    def test_numpy_conversion_2(self):
        a = histogram(integer_axis(0, 1, uoflow=False),
                      integer_axis(0, 2, uoflow=False),
                      integer_axis(0, 3, uoflow=False))
        r = numpy.zeros((2, 3, 4), dtype=numpy.int8)
        for i in range(a.axis(0).bins):
            for j in range(a.axis(1).bins):
                for k in range(a.axis(2).bins):
                    for m in range(i+j+k):
                        a.fill(i, j, k)
                    r[i,j,k] = i+j+k
        c = numpy.array(a) # a copy
        v = numpy.asarray(a) # a view

        c2 = numpy.zeros((2, 3, 4), dtype=numpy.int8)
        for i in range(a.axis(0).bins):
            for j in range(a.axis(1).bins):
                for k in range(a.axis(2).bins):
                    c2[i,j,k] = a.value(i,j,k)

        self.assertTrue(numpy.all(c == c2))
        self.assertTrue(numpy.all(c == r))
        self.assertTrue(numpy.all(v == r))

    @unittest.skipUnless(have_numpy, "requires build with numpy-support")
    def test_numpy_conversion_3(self):
        a = histogram(integer_axis(0, 1),
                      integer_axis(0, 2),
                      integer_axis(0, 3))
        r = numpy.zeros((2, 4, 5, 6))
        for i in range(a.axis(0).bins):
            for j in range(a.axis(1).bins):
                for k in range(a.axis(2).bins):
                    a.fill(i, j, k, w=i+j+k)
                    r[0, i, j, k] = i+j+k
                    r[1, i, j, k] = (i+j+k)**2
        c = numpy.array(a) # a copy
        v = numpy.asarray(a) # a view

        c2 = numpy.zeros((2, 4, 5, 6))
        for i in range(a.axis(0).bins):
            for j in range(a.axis(1).bins):
                for k in range(a.axis(2).bins):
                    c2[0, i, j, k] = a.value(i,j,k)
                    c2[1, i, j, k] = a.variance(i,j,k)

        self.assertTrue(numpy.all(c == c2))
        self.assertTrue(numpy.all(c == r))
        self.assertTrue(numpy.all(v == r))

    @unittest.skipUnless(have_numpy, "requires build with numpy-support")
    def test_numpy_conversion_4(self):
        a = histogram(integer_axis(0, 1, uoflow=False))
        a1 = numpy.asarray(a)
        self.assertEqual(a1.dtype, numpy.uint8)
        self.assertEqual(a1.shape, (2,))

        b = histogram()
        b1 = numpy.asarray(b)
        self.assertEqual(b1, 0)

    @unittest.skipUnless(have_numpy, "requires build with numpy-support")
    def test_bad_numpy_conversion(self):
        a = histogram(integer_axis(0, 0))
        a.fill(0)
        for i in xrange(80):
            a += a
        # a now holds a multiprecision type
        with self.assertRaises(ValueError):
            numpy.asarray(a)

    @unittest.skipUnless(have_numpy, "requires build with numpy-support")
    def test_fill_with_numpy_array_0(self):
        a = histogram(integer_axis(0, 2, uoflow=False))
        a.fill(numpy.array([-1, 0, 1, 2, 1, 4]))
        a.fill((-1, 0))
        a.fill([1, 2])
        self.assertEqual(a.value(0), 2)
        self.assertEqual(a.value(1), 3)
        self.assertEqual(a.value(2), 2)

        with self.assertRaises(ValueError):
            a.fill(numpy.empty((2, 2)))
        with self.assertRaises(ValueError):
            a.fill(numpy.empty((1, 2, 2)))
        with self.assertRaises(RuntimeError):
            a.fill(numpy.empty((2, 1)), 1)
        with self.assertRaises(ValueError):
            a.fill("abc")

        a = histogram(integer_axis(0, 1, uoflow=False),
                      regular_axis(2, 0, 2, uoflow=False))
        a.fill(numpy.array([[-1., -1.], [0., 1.], [1., 0.1]]))
        self.assertEqual(a.value(0, 0), 0)
        self.assertEqual(a.value(0, 1), 1)
        self.assertEqual(a.value(1, 0), 1)
        self.assertEqual(a.value(1, 1), 0)

        with self.assertRaises(ValueError):
            a.fill((1, 2, 3))

        a = histogram(integer_axis(0, 2, uoflow=False))
        a.fill([0, 0, 1, 2])
        a.fill((1, 0, 2, 2))
        self.assertEqual(a.value(0), 3)
        self.assertEqual(a.value(1), 2)
        self.assertEqual(a.value(2), 3)


    @unittest.skipUnless(have_numpy, "requires build with numpy-support")
    def test_fill_with_numpy_array_1(self):
        a = histogram(integer_axis(0, 2, uoflow=True))
        v = numpy.array([-1, 0, 1, 2, 3, 4])
        w = numpy.array([ 2, 3, 4, 5, 6, 7])
        a.fill(v, w=w)
        a.fill([0, 1], w=[2.0, 3.0])
        self.assertEqual(a.value(-1), 2)
        self.assertEqual(a.value(0), 5)
        self.assertEqual(a.value(1), 7)
        self.assertEqual(a.value(2), 5)
        self.assertEqual(a.variance(-1), 4)
        self.assertEqual(a.variance(0), 13)
        self.assertEqual(a.variance(1), 25)
        self.assertEqual(a.variance(2), 25)

        with self.assertRaises(RuntimeError):
            a.fill([1, 2], foo=[1, 1])
        with self.assertRaises(ValueError):
            a.fill([1, 2], w=[1])
        with self.assertRaises(ValueError):
            a.fill([1, 2], w="ab")
        with self.assertRaises(ValueError):
            a.fill([1, 2], w=1)
        with self.assertRaises(RuntimeError):
            a.fill([1, 2], w=[1, 1], foo=1)
        with self.assertRaises(ValueError):
            a.fill([1, 2], w=[[1, 1], [2, 2]])

        a = histogram(integer_axis(0, 1, uoflow=False),
                      regular_axis(2, 0, 2, uoflow=False))
        a.fill(numpy.array([[-1., -1.], [0., 1.], [1., 0.1]]))
        self.assertEqual(a.value(0, 0), 0)
        self.assertEqual(a.value(0, 1), 1)
        self.assertEqual(a.value(1, 0), 1)
        self.assertEqual(a.value(1, 1), 0)
        a = histogram(integer_axis(0, 2, uoflow=False))
        a.fill([0, 0, 1, 2])
        a.fill((1, 0, 2, 2))
        self.assertEqual(a.value(0), 3)
        self.assertEqual(a.value(1), 2)
        self.assertEqual(a.value(2), 3)

if __name__ == "__main__":
    unittest.main()
