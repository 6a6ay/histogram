# Copyright Hans Dembinski 2016-2017
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

sudo: false
language: cpp

cache:
  pip: true
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.66.0

branches:
  only:
    - master
    - develop

# g++-5 also needed for clang to see C++14 stdlib
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - libstdc++-5-dev libgcc-5-dev libstdc++6 libasan2 libtsan0 libubsan0

matrix:
  include:
    - os: linux
      compiler: clang
      env: SERIAL=OFF
    - os: linux
      compiler: clang
      env: SERIAL=ON
    - os: osx
      env: SERIAL=OFF
    - os: linux # coverage build
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
        - MATRIX_EVAL="GCOV=gcov-5 && CC=gcc-5 && CXX=g++-5"

git:
  depth: 1

before_install:
    - eval "${MATRIX_EVAL}"

# Install packages (pre-installed: pytest)
install:
  - source tools/travis_install_boost.sh

  - if [ -n "$GCOV" ]; then
      pip install --user cpp-coveralls urllib3[secure];
    fi

# detect_leaks=0 is required on container builds by travis, not because we want to hide leaks :(
script:
  - mkdir build
  - cd build
  - if [ -n "$GCOV" ]; then
      cmake .. -DBOOST_ROOT=${BOOST_DIR}
               -DTEST_SERIALIZATION=ON
               -DCMAKE_BUILD_TYPE=coverage &&
      make -j2 &&
      ctest -V;
    else
      cmake .. -DBOOST_ROOT=${BOOST_DIR}
               -DBUILD_BENCHMARKS=ON
               -DTEST_SERIALIZATION=${SERIAL}
               -DCMAKE_BUILD_TYPE=Debug &&
      make -j2 &&
      LSAN_OPTIONS=verbosity=1:log_threads=1 ASAN_OPTIONS=detect_leaks=0:detect_stack_use_after_return=1 ctest -V;
    fi

# Calculate coverage
after_success:
  if [ -n "$GCOV" ]; then
    coveralls -r .. -b . --verbose --exclude ${TRAVIS_BUILD_DIR}/deps  --gcov=`which ${GCOV}` --gcov-options '\-lpbc';
  fi

# after_failure:
  # - otool -L histogram.so
  # - printf "r\nbt" > gdb.cmd
  # - for x in *_test; do
  #     $x || gdb $x --batch -x gdb.cmd;
  #   done

notifications:
  email: false
