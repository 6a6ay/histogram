# Copyright Hans Dembinski 2016-2017
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

sudo: false
language: python

cache:
  pip: true
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.65.0-py2
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.65.0-py3

branches:
  only:
    - master
    - develop

matrix:
  include:
    - os: linux # minimum gcc
      python: 2.7
      env:
        - CC=gcc
        - CXX=g++
        - BUILD_PYTHON=OFF
        - BUILD_NUMPY=OFF
        - BUILD_SERIALIZATION=OFF
    - os: linux # maximum gcc
      python: 2.7
      addons:
        apt:
          sources: deadsnakes
          packages: python2.7-dev
      env:
        - CC=gcc
        - CXX=g++
        - BUILD_PYTHON=ON
        - BUILD_NUMPY=ON
        - BUILD_SERIALIZATION=ON
    - os: linux # maximum gcc
      python: 3.5
      addons:
        apt:
          sources: deadsnakes
          packages: python3-dev
      env:
        - CC=gcc
        - CXX=g++
        - BUILD_PYTHON=ON
        - BUILD_NUMPY=ON
        - BUILD_SERIALIZATION=ON
    - os: linux # maximum clang
      python: 2.7
      addons:
        apt:
          sources: deadsnakes
          packages: python2.7-dev
      env:
        - CC=clang
        - CXX=clang++
        - BUILD_PYTHON=ON
        - BUILD_NUMPY=ON
        - BUILD_SERIALIZATION=ON
    - os: linux # coverage gcc
      python: 2.7
      addons:
        apt:
          sources: deadsnakes
          packages: python2.7-dev
      env:
        - CC=gcc
        - CXX=g++
        - CMAKE_BUILD_TYPE=coverage

git:
  depth: 1

# Install packages (pre-installed: pytest numpy)
install:
  - PYTHON_VERISON_MAJOR=$(python -c 'import sys; sys.stdout.write("%i" % sys.version_info.major)')
  - PYTHON_VERISON=$(python -c 'import sys; sys.stdout.write("%i.%i" % (sys.version_info.major, sys.version_info.minor))')

  - BOOST_VERSION=1.65.0 # match version number of cache directory above
  - BOOST_DIR=${TRAVIS_BUILD_DIR}/deps/boost-${BOOST_VERSION}-py${PYTHON_VERSION_MAJOR}
  - echo ${BOOST_DIR}
  - mkdir -p ${BOOST_DIR}
  - |
    if [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
      BOOST_URL="http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.gz"
      { travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
      (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 install --prefix=${BOOST_DIR} --with-serialization --with-iostreams --with-python | grep -v -e common\.copy -e common\.mkdir)
    fi

  - ls ${BOOST_DIR}/lib | grep libboost

  - if [ "${CMAKE_BUILD_TYPE}" = "coverage" ]; then
      pip install cpp-coveralls urllib3[secure];
    fi

script:
  - cd build
  - if [ "${CMAKE_BUILD_TYPE}" = "coverage" ]; then
      cmake . -DBOOST_ROOT=${BOOST_DIR}
              -DBUILD_PYTHON=OFF
              -DBUILD_SERIALIZATION=ON
              -DCMAKE_BUILD_TYPE=coverage &&
      make -j2 &&
      ctest -V;
      cmake . -DBOOST_ROOT=${BOOST_DIR}
              -DBUILD_PYTHON=ON
              -DBUILD_NUMPY=OFF
              -DCMAKE_BUILD_TYPE=coverage &&
      make -j2 &&
      ctest -V;
      cmake . -DBOOST_ROOT=${BOOST_DIR}
              -DBUILD_PYTHON=ON
              -DBUILD_NUMPY=ON
              -DCMAKE_BUILD_TYPE=coverage &&
      make -j2 &&
      ctest -V;
    else
      cmake . -DBOOST_ROOT=${BOOST_DIR}
              -DBUILD_PYTHON=${BUILD_PYTHON}
              -DBUILD_NUMPY=${BUILD_NUMPY}
              -DBUILD_SERIALIZATION=${BUILD_SERIALIZATION}
              -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} &&
      make -j2 &&
      ctest -V;
    fi

# Calculate coverage
after_success:
  if [ "${CMAKE_BUILD_TYPE}" = "coverage" ]; then
    coveralls -r .. -b . --verbose --exclude ${TRAVIS_BUILD_DIR}/deps  --gcov=`which gcov-${COMPILER_VERSION}` --gcov-options '\-lp';
  fi

after_failure:
  # - printf "r\nbt" > gdb.cmd
  # - for x in *_test; do
  #     $x || gdb $x --batch -x gdb.cmd;
  #   done

notifications:
  email: false
