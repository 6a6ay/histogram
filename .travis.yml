# Copyright Hans Dembinski 2016-2017
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

sudo: false
language: generic

cache:
  pip: true
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.66.0-py2
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.66.0-py3

branches:
  only:
    - master
    - develop

matrix:
  include:
    - os: linux # gcc minimum
      env: PYVER=OFF CC=gcc CXX=g++ NUMPY=OFF SERIAL=OFF
    - os: linux # gcc py37 w/o numpy
      env: PYVER=3.7 CC=gcc CXX=g++ NUMPY=OFF SERIAL=ON
    - os: linux # gcc py37
      env: PYVER=3.7 CC=gcc CXX=g++ NUMPY=ON SERIAL=ON
    - os: linux # clang py37
      env: PYVER=3.7 CC=clang CXX=clang++ NUMPY=ON SERIAL=ON
    - os: linux # gcc py27
      env: PYVER=2.7 CC=gcc CXX=g++ NUMPY=ON SERIAL=ON
    - os: linux # coverage py37
      env: PYVER=3.7 CC=gcc CXX=g++ GCOV=gcov
    - os: osx # minimum osx Xcode 8.3
      osx_image: xcode8.3
      env: PYVER=OFF NUMPY=OFF SERIAL=OFF

git:
  depth: 10

# Install packages (pre-installed: pytest)
install:
  - if [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
      export PATH="/usr/local/opt/python/libexec/bin:$PATH";
    else
      if [[ ${PYVER} != "OFF" ]]; then
        pyenv versions;
        pyenv global ${PYVER};
        export PYTHON=ON;
      else
        export PYTHON=OFF;
      fi;
    fi

  - python --version
  - python build/get_python_include.py
  - python build/get_python_library.py

  - pip install --upgrade numpy # update numpy to avoid segfaults later
  - source build/travis_install_boost.sh

  - if [ -n ${GCOV} ]; then
      pip install cpp-coveralls urllib3[secure];
    fi

script:
  - cd build
  - if [ -n "$GCOV" ]; then
      cmake . -DBOOST_ROOT=${BOOST_DIR}
              -DBUILD_PYTHON=OFF
              -DBUILD_SERIALIZATION=ON
              -DCMAKE_BUILD_TYPE=coverage &&
      make -j2 &&
      ctest;
      cmake . -DBOOST_ROOT=${BOOST_DIR}
              -DBUILD_PYTHON=ON
              -DBUILD_NUMPY=OFF
              -DCMAKE_BUILD_TYPE=coverage &&
      make histogram cpp_filler &&
      ctest;
      cmake . -DBOOST_ROOT=${BOOST_DIR}
              -DBUILD_PYTHON=ON
              -DBUILD_NUMPY=ON
              -DCMAKE_BUILD_TYPE=coverage &&
      make histogram cpp_filler &&
      ctest;
    else
      cmake . -DBOOST_ROOT=${BOOST_DIR}
              -DBUILD_PYTHON=${PYTHON}
              -DBUILD_NUMPY=${NUMPY}
              -DBUILD_SERIALIZATION=${SERIAL}
              -DCMAKE_BUILD_TYPE=Debug &&
      make -j2 &&
      ctest -V;
    fi

# Calculate coverage
after_success:
  if [ -n "$GCOV" ]; then
    coveralls -r .. -b . --verbose --exclude ${TRAVIS_BUILD_DIR}/deps  --gcov=`which ${GCOV}` --gcov-options '\-lpbc';
  fi

# after_failure:
  # - printf "r\nbt" > gdb.cmd
  # - for x in *_test; do
  #     $x || gdb $x --batch -x gdb.cmd;
  #   done

notifications:
  email: false
