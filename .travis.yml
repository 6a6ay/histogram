# Copyright Hans P. Dembinski 2016-2017
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

sudo: false

cache:
  pip: true

language: cpp

branches:
  except:
    - html

matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - boost-latest
          packages:
            - g++-4.8
            - libboost1.55-dev
            - libboost-iostreams1.55
            - libboost-iostreams1.55-dev
            - libboost-python1.55
            - libboost-python1.55-dev
            - libboost-serialization1.55.0
            - libboost-serialization1.55-dev
      env: COMPILER_VERSION=4.8 PYTHON_VERSION=2.7 CMAKE_BUILD_TYPE=cov
    - os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6
            - boost-latest
          packages:
            - clang-3.6
            - libboost1.55-dev
            - libboost-iostreams1.55
            - libboost-iostreams1.55-dev
            - libboost-python1.55
            - libboost-python1.55-dev
            - libboost-serialization1.55.0
            - libboost-serialization1.55-dev
      env: COMPILER_VERSION=3.6 PYTHON_VERSION=2.7

git:
  depth: 1

# Install packages
install:
  - export CXX=${CXX}-${COMPILER_VERSION}
  - export CC=${CC}-${COMPILER_VERSION}
  # - conda create --name pyenv --yes python=${PYTHON_VERSION} numpy
  # - source activate pyenv
  # - pip install --upgrade --user pip
  # - export PYTHON_PATH=${HOME}/.local/lib/python2.7/site-packages:$PYTHON_PATH
  # - ${HOME}/.local/bin/pip --version
  # - ${HOME}/.local/bin/pip install --only-binary=numpy --user numpy==1.11.1 cpp-coveralls urllib3[secure]
  - pip install --user numpy==1.11.1 cpp-coveralls urllib3[secure]

script:
  - travis_retry git clone --depth 1 https://github.com/boostorg/core.git core || exit 1
  - rsync --recursive core/include/boost/* include/boost/

  - cd build
  - cmake . -DBUILD_PYTHON=OFF
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} &&
    make -j2 &&
    ctest -V
  - printf "r\nbt" > gdb.cmd
  - gdb axis_test --batch -x gdb.cmd
  - cmake . -DBUILD_PYTHON=ON -DPYTHON_VERSION=${PYTHON_VERSION}
            -DBUILD_NUMPY_SUPPORT=OFF
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} &&
    make -j2 &&
    ctest -V
  - cmake . -DBUILD_PYTHON=ON -DPYTHON_VERSION=${PYTHON_VERSION}
            -DBUILD_NUMPY_SUPPORT=ON
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} &&
    make -j2 &&
    ctest -V

# Calculate coverage
after_success:
  if [ "${CMAKE_BUILD_TYPE}" = "cov" ]; then
    coveralls -r .. -b . --gcov=`which gcov-${COMPILER_VERSION}`;
  fi

after_failure:
  - make clean && VERBOSE=1 make
  - dpkg -L libboost-python1.55.0

notifications:
  email: false
