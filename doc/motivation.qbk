[section:motivation Motivation]

Histograms are a basic tool in statistical analysis. When analysing large data sets, it is usually more convenient to work with a histogram of input values, which may consume a lot of memory or disc space and may be slow to process. Histograms can compactly represent a data set of one or several random variables with acceptable loss of information. One can imagine histograms as a lossy compression of statistical data.

Parameters of interest, like the center of a distribution, can be extracted from the histogram instead of the original data set; statistical models can be fitted to histograms to the same end. Finally, histograms help to visualize complex data sets.

C++ lacks a widely-used, free histogram class. While it is easy to write a one-dimensional histogram, writing a general multi-dimensional histogram poses more of a challenge. If you add serialization and Python/Numpy support onto the wish-list, then the implementation becomes non-trivial and a well-tested library solution desirable.

The [@https://www.gnu.org/software/gsl GNU Scientific Library (GSL)] and in the [@https://root.cern.ch ROOT framework] from CERN have histogram implementations. The C implementations of the GSL are object oriented and elegant, but only support one and two dimensions. The implementations are not customizable, you have to live with the trade-offs chosen by the implementors. ROOT has implementations for one, two, three, and general n-dimensional histograms. However, the interfaces are unnecessarily complex and inconsistent, and mix many different responsibilities. They are also not well designed to prevent user errors. For example, the ROOT design forces users to make an educated decision on which data type for the counters, an aspect that the library should encapsulate.

The two histogram classes in this project share an interface which we believe to be as elegant as the GSL implementations. In addition, they are customizable through exchangable policies and user-supplied binning algorithms. Thanks to variadic templates, the interface is consistent for any number of dimensions. The implementations are also very fast, using compile-time information wherever possible and [@boost:/libs/variant/index.html Boost.Variant] rather than virtual inheritance to achieve more flexible polymorphism.

A central design goal is to completely encapsulate details on the internal counters. The internal counting mechanism is independent of the external histogram interface and encapsulated in a storage policy, which can be replaced at compile time.

The standard policy implements a smart counting approach which is very fast, memory-efficient, and safe, since counts can neither overflow nor lose precision. In the standard configuration, the histogram *just works* under any circumstance. Users with unusual requirements can implement their own custom storage policy or use the alternative container-based storage policy. With the latter, for example, and in conjunction with a [@boost:/libs/array/index.html Boost.Array], it is possible to construct a histogram entirely on the stack.

[endsect]