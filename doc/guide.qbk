[section:guide User guide]

How to create and work with histograms is described here. This library is designed to make simple things simple, yet complex things possible. For a quick start, you don't need to read the complete user guide; have a look at the [link histogram.getting_started Getting started] section. This guide covers the basic and more advanced usage of the library.

[section Use case for multi-dimensional histograms]

This library provides a class with a simple interface, which implements a general multi-dimensional histogram for multi-dimensional data. A histogram represents a finite number of discrete cells over the data space. A datum passed to the histogram is sorted into one of these cells, called bins here, and instead of storing the datum, the counter of the bin is incremented. Keeping the bin counts around requires much less memory than keeping all the original data around.

Data can be one-dimensional or multi-dimensional. A multi-dimensional datum is an entity that has more than one describing feature. A point in space is an example. You need three values to describe a single point, the datum, and you probably want to use a 3-d histogram to capture a 3-d point distribution in space.

The advantage of using a 3-d histogram over three separate 1-d histograms, one for each coordinate, is that the multi-dimensional histogram is able to capture more structure. For example, you could have a point distribution that looks like a checker board, alternating high and low density along each coordinate. Then the 1-d histograms would look like flat distributions, completely hiding the structure, while the 3-d histogram would retain the structure for further analysis.

[endsect]

[section C++ usage]

[section Create a histogram]

The histogram class comes in two variants with a common interface, see the [link histogram.rationale.histogram_types rationale] for more information. Using [classref boost::histogram::histogram<Static,...>] is recommended when it is possible. You need [classref boost::histogram::histogram<Dynamic,...>] if:

* you only know the histogram configurations at runtime, not at compile-time

* you want to interoperate with Python

Use the factory function [funcref boost::histogram::make_static_histogram] (or [funcref boost::histogram::make_dynamic_histogram], respectively) to make histograms with default policies. The default policies make sure that the histogram is safe to use, very fast, and memory efficient. If you are curious about trying other policies or using your own, have a look at the expert section below.

[c++]``
#include <boost/histogram.hpp>

namespace bh = boost::histogram;

int main() {
	// create a 1d-histogram in default configuration which
	// covers the real line from -1 to 1 in 100 bins
	auto h = bh::make_static_histogram(bh::axis::regular<>(100, -1, 1));
	// do something with h
}
``

The function `make_static_histogram(...)` takes a variable number of axis objects as arguments. An axis object defines how input values are mapped to bins, which means that it defines the mapping function and the number bins. If you provide one axis, the histogram is one-dimensional. If you provide two, it is two-dimensional, and so on.

When you work with [classref boost::histogram::histogram<Dynamic,...>], you can also create a histogram from a run-time compiled collection of axis objects:

[c++]``
#include <boost/histogram.hpp>
#include <vector>

namespace bh = boost::histogram;

int main() {
	using hist_type = bh::histogram<bh::Dynamic, bh::axis::builtins>;
	auto v = std::vector<hist_type::any_axis_type>();
	v.push_back(bh::axis::regular<>(100, -1, 1));
	v.push_back(bh::axis::integer<>(1, 7));
	auto h = hist_type(v.begin(), v.end());
	// do something with h
}
``

[note In all these examples, memory for bin counters is allocated lazily, because the default policy [classref boost::histogram::adaptive_storage] is used. Allocation is deferred to the first call to `fill(...)`, which are described in the next section. Therefore memory allocation exceptions are not thrown when the histogram is created, but possibly later on the first fill. This also gives you a chance to check how much memory the histogram will allocate and whether that is prohibitive. Use the method `bincount()` to see how many bins your axis layout requires. At the first fill, `bincount()` bytes will be allocated, which may grow later again when the size of the bin counters needs to be increased.]

[section Axis configuration]

The library comes with a number of builtin axis classes (you can write your own, too, see [link histogram.concepts.axis axis concept]). The [classref boost::histogram::axis::regular regular axis] should be your default choice, because it is easy to use and fast. If you have a continous range of integers, the [classref boost::histogram::axis::integer integer axis] is faster. If you have data which wraps around, like angles, use a [classref boost::histogram::axis::circular circular axis].

[note All axes which define bins in terms of intervals always use semi-open intervals by convention. The last value is never included. For example, the axis `axis::integer<>(0, 3)` has three bins with intervals `[0, 1), [1, 2), [2, 3)`. To remember this, think of iterator ranges from `begin` to `end`, where `end` is also not included.]

Check the class descriptions of [classref boost::histogram::axis::regular regular axis], [classref boost::histogram::axis::variable variable axis], [classref boost::histogram::axis::circular circular axis], [classref boost::histogram::axis::integer integer axis], and [classref boost::histogram::axis::category category axis] for advice. See the [link histogram.rationale.axis_types rationale about axis types] for more information.

In addition to the required parameters for an axis, you can assign an optional label to any axis, which helps to remember what the axis is categorising. Example: you have census data and you want to investigate how yearly income correlates with age, you could do:

[c++]``
#include <boost/histogram.hpp>

namespace bh = boost::histogram;

int main() {
	// create a 2d-histogram in default configuration with an "age" axis
	// and an "income" axis
	auto h = bh::make_static_histogram(bh::axis::regular<>(20, 0, 100, "age in years"),
	                                   bh::axis::regular<>(20, 0, 100, "yearly income in $1000"));
	// do something with h
}
``

Without the labels it would be difficult to remember which axis was covering which quantity. Labels are the only property of an axis that can be changed later. Axes objects which differ in their label do not compare equal with `operator==`.

By default, under- and overflow bins are added automatically for each axis range. Therefore, if you create an axis with 20 bins, the histogram will actually have 22 bins in that dimension. The two extra bins are very useful and in most cases you want to have them. However, if you know for sure that the input is strictly covered by the axis, you can disable them to save memory. This is done by passing an additional parameter to the axis constructor:

[c++]``
#include <boost/histogram.hpp>

namespace bh = boost::histogram;

int main() {
	// create a 1d-histogram for dice throws with eye values from 1 to 6
	auto h = bh::make_static_histogram(bh::axis::integer<>(1, 7, "eyes", bh::axis::uoflow::off));
	// do something with h
}
``

We use an [classref boost::histogram::axis::integer integer axis] here, because the input values are integers.

[note The specialised [classref boost::histogram::axis::circular circular axis] never creates under- and overflow bins, because the axis is circular. The highest bin wrapps around to the lowest bin and vice versa, so there is no need for extra bins.]

[endsect]

[endsect]

[section Fill a histogram with data]

After you created the histogram, you want to insert potentionally multi-dimensional data. This is done with the flexible `fill(...)` method, which you call in a handcrafted loop. The histogram supports three kinds of fills, as shown in the example:

[c++]``
#include <boost/histogram.hpp>

namespace bh = boost::histogram;

int main() {
	auto h = bh::make_dynamic_histogram(bh::axis::integer<>(0, 4),
	                                    bh::axis::regular<>(10, 0, 5));

	// fill histogram, number of arguments must be equal to number of axes
	h.fill(0, 4.1); // increases bin counter by one
	h.fill(1, 1.2, bh::count(3)); // increase bin counter by 3
	h.fill(bh::count(3), 2, 2.3); // also increases bin counter by 3
	h.fill(3, 3.4, bh::weight(1.5)); // increase bin counter by weight 1.5
	h.fill(bh::weight(1.5), 3, 3.4); // does the same as the previous call

	// a dynamic histogram also supports fills from an interator range while
	// a static histogram does not allow it; using a range of wrong length
	// is an error
	std::vector<double> values = {4, 3.1};
	h.fill(values.begin(), values.end());
}
``

Here is a breakdown regarding fills.

* `fill(...)` initiates a normal fill, which takes `N` arguments, where `N` is equal to the number of axes of the histogram, finds the corresponding bin, and increments an the counter of that bin by one.

* `fill(..., count(n))` initiates a fill, which increments the associated bin counter by the integer number `n`. There are no restrictions on the position of the `count` helper class, it can appear at he beginning or the end or at any other position. Using more than one `count` instance is an error.

* `fill(..., weight(x))` initiates a weighted fill, which increments the value counter of the associated bin by a real number `x` and an associated variance counter by `x*x`. The position of the `weight` helper class is free, just like for `count`. Having more than one `weight` instance or `weight` and `count` in the same call is an error.

You can freely mix these order of these calls. For example, you can start calling `fill(...)` and later switch to `fill(..., weight(x))` on the same histogram and vice versa.

Why weighted fills are useful to some is explained [link histogram.rationale.weights in the rationale]. This is mostly required in a scientific context. If you don't see the point, you can just ignore this type of call. Especially, do not use a weighted fill, if you just wanted to avoid calling `fill(...)` repeatedly with the same arguments. Use `fill(..., count(n))` for that, because it is more efficient.

[note The first call to a weighted fill will internally cause a switch from integral bin counters to a new data structure, which holds two double counters per bin, one for the sum of weights (the value), and another for the sum of weights squared (the variance). This is necessary, because in case of weighted fills, the variance cannot be trivially computed from the integral count anymore.]

In contrast to [@boost:/libs/accumulators/index.html Boost.Accumulators], this library asks you to write the filling loop yourself, because that is the most flexible solution for multi-dimensional data. If you prefer a functional programming style, you can use a lambda, as shown in this example.

[c++]``
#include <boost/histogram.hpp>
#include <algorithm>
#include <vector>

namespace bh = boost::histogram;

int main() {
	auto h = bh::make_static_histogram(bh::axis::integer<>(0, 9));
	std::vector<int> v{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	std::for_each(v.begin(), v.end(),
		[&h](int x) { h.fill(x, bh::weight(2.0)); }
	);
	// h is now filled
}
``

[endsect]

[section Extract data from a filled histogram]

Once the histogram has been filled, you want to access the bin counts at some point. You may want to visualize the histogram, or compute some quantities like the mean of the distribution approximately represented by the histogram.

To access the count of each bin, you use a multi-dimensional index, which consists of a sequence of bin indices for the axes in order. You can use this index to access the value and variance of each bin, using the methods with the same name, as demonstrated in the next example.

[c++]``
#include <boost/histogram.hpp>
#include <iostream>

namespace bh = boost::histogram;

int main() {
	// make a histogram with 2 x 2 = 4 bins (not counting under- and overflow bins)
	auto h = bh::make_dynamic_histogram(bh::axis::regular<>(2, -1, 1),
	                                    bh::axis::regular<>(2,  2, 4));
	h.fill(-0.5, 2.5, bh::count(1)); // low, low
	h.fill(-0.5, 3.5, bh::count(2)); // low, high
	h.fill( 0.5, 2.5, bh::count(3)); // high, low
	h.fill( 0.5, 3.5, bh::weight(4)); // high, high

	// access value of bin count, number of arguments must be equal
	std::cout << h.value(0, 0) << " " // low, low
	          << h.value(0, 1) << " " // low, high
	          << h.value(1, 0) << " " // high, low
	          << h.value(1, 1)        // high, high
	          << std::endl;

	// prints: 1 2 3 4

	// access variance of bin count
	std::cout << h.variance(0, 0) << " " // low, low
	          << h.variance(0, 1) << " " // low, high
	          << h.variance(1, 0) << " " // high, low
	          << h.variance(1, 1)        // high, high
	          << std::endl;

	// prints: 1 2 3 16

	// a dynamic histogram also supports access via an interator range, while
	// a static histogram does not allow it; using a range of wrong length
	// is an error
	std::vector<int> idx(2);
	idx = {0, 1};
	std::cout << h.value(idx.begin(), idx.end()) << " "
	          << h.variance(idx.begin(), idx.end()) << std::endl;
}
``

[note The numbers returned by `value(...)` and `variance(...)` are equal, as long as the bin has not been filled with a weighted datum. The internal structure, which handles the bin counters, has been optimised for this common case. It uses only a single counter per bin for normal fills, and only switches to two counters once the first weighted fill is performed.]

[endsect]

[section Supported arithmetic operators]

Histograms can be added if they have the same signature. This is convenient if histograms are filled in parallel on a cluster and then merged (added).

[endsect]

[section Streaming and serialization]

The histogram provides a non-parametric variance estimate for the bin count in either case.

The histogram can be serialized to disk for persistent storage from C++ and pickled in Python. It comes with Numpy support, too. The histogram can be fast-filled with Numpy arrays for maximum performance, and viewed as a Numpy array without copying its memory buffer.

[endsect]

[section Expert usage]

TODO

[endsect]

[endsect]

[section Python usage]

The C++ histogram has Python-bindings, so you can create histograms in Python. It is a useful workflow to create and configure histograms in Python and then pass them to some C++ code which fills them at maximum speed. You rarely need to change the way the histogram is filled, but you likely want to iterate the range and binning of the axis after seeing the data.

Here is a conceptual example:

[python]``
# also see examples/create_python_fill_cpp.py and examples/module_cpp_filler.cpp
import histogram as bh
import cpp_filler

h = bh.histogram(bh.axis.regular(100, -1, 1),
                 bh.axis.integer(0, 10))

cpp_filler.process(h) # histogram is filled with input values

# continue with statistical analysis of h
``

In Python, you can straight-forwardly create a histogram object with a variable number of axis arguments. The histogram instance passes the language barrier without copying its internal (possibly large) data buffer, so this workflow is efficient.

You can also fill the histogram in Python. Looping over a collection in Python is very slow and should be avoided. If you pass the input values as numpy arrays, this is efficient and almost as fast as using C++, see the [link histogram.benchmarks benchmark].  Here is an example to illustrate:

[python]``
import histogram as bh
import numpy as np

h = bh.histogram(bh.axis.integer(0, 9))

# don't do this, it is very slow
for i in range(10):
	h.fill(i)

# do this instead, it is very fast
v = np.arange(10, dtype=float)
h.fill(v) # fills the histogram with each value in the array
``

`fill(...)` accepts any sequence that can be converted into a numpy array with `dtype=float`. To get the best performance, avoid the conversion and work with such numpy arrays directly.

The histogram can be serialized to disk for persistent storage from C++ and pickled in Python. It comes with Numpy support, too. The histogram can be fast-filled with Numpy arrays for maximum performance, and viewed as a Numpy array without copying its memory buffer.

[endsect]

[endsect]
