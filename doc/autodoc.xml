<?xml version="1.0" standalone="yes"?>
<library-reference><header name="boost/histogram.hpp">
<para>Includes all the non-experimental headers of the Boost.histogram library. </para><para>The library consists of two histogram implementations <classname alt="boost::histogram::static_histogram">static_histogram</classname> and <classname alt="boost::histogram::dynamic_histogram">dynamic_histogram</classname> which share the same interface. The first is faster, but lacks run-time polymorphism, the second makes the opposite trade-off. Several axis types are included, which implement different binning algorithms. The axis types are passed in the constructor of the histogram to configure its binning. </para></header>
<header name="boost/histogram/axis.hpp">
<namespace name="boost">
<namespace name="histogram">
<class name="axis_with_label"><purpose>Common base class for most axes. </purpose><method-group name="public member functions">
<method name="bins" cv="const"><type>int</type><purpose>Returns the number of bins, excluding overflow/underflow. </purpose></method>
<method name="shape" cv="const"><type>int</type><purpose>Returns the number of bins, including overflow/underflow. </purpose></method>
<method name="uoflow" cv="const"><type>bool</type><purpose>Returns whether axis has extra overflow and underflow bins. </purpose></method>
<method name="label" cv="const"><type>const char *</type><purpose>Returns the axis label, which is a name or description (not implemented for <classname alt="boost::histogram::category_axis">category_axis</classname>). </purpose></method>
<method name="label"><type>void</type><parameter name="label"><paramtype>const char *</paramtype></parameter><purpose>Change the label of an axis (not implemented for <classname alt="boost::histogram::category_axis">category_axis</classname>). </purpose></method>
</method-group>
<method-group name="protected member functions">
<method name="operator==" cv="const"><type>bool</type><parameter name="o"><paramtype>const <classname>axis_with_label</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor><parameter name="n"><paramtype>unsigned</paramtype></parameter><parameter name="label"><paramtype>const char *</paramtype></parameter><parameter name="uoflow"><paramtype>bool</paramtype></parameter></constructor>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>axis_with_label</classname> &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name=""><paramtype><classname>axis_with_label</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>axis_with_label</classname> &amp;</type><parameter name=""><paramtype>const <classname>axis_with_label</classname> &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type><classname>axis_with_label</classname> &amp;</type><parameter name=""><paramtype><classname>axis_with_label</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
</class><class name="category_axis"><purpose>An axis for enumerated categories. The axis stores the category labels, and expects that they are addressed using an integer from <computeroutput>0</computeroutput> to <computeroutput>n-1</computeroutput>. There are no underflow/overflow bins for this axis. Binning is a O(1) operation. </purpose><typedef name="value_type"><type>const char *</type></typedef>
<method-group name="public member functions">
<method name="bins" cv="const"><type>int</type></method>
<method name="shape" cv="const"><type>int</type></method>
<method name="uoflow" cv="const"><type>bool</type></method>
<method name="index" cv="const"><type>int</type><parameter name="x"><paramtype>int</paramtype></parameter><purpose>Returns the bin index for the passed argument. </purpose></method>
<method name="operator[]" cv="const"><type>const char *</type><parameter name="idx"><paramtype>int</paramtype></parameter><purpose>Returns the category for the bin index. </purpose></method>
<method name="operator==" cv="const"><type>bool</type><parameter name="other"><paramtype>const <classname>category_axis</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></constructor>
<constructor specifiers="explicit"><parameter name="categories"><paramtype>const std::initializer_list&lt; const char *&gt; &amp;</paramtype><description><para>ordered sequence of categories that this axis discriminates </para></description></parameter><description><para>Construct from initializer list of strings</para><para>
</para></description></constructor>
<constructor specifiers="explicit"><parameter name="categories"><paramtype>const std::vector&lt; const char *&gt; &amp;</paramtype></parameter></constructor>
<constructor/>
<constructor><parameter name="other"><paramtype>const <classname>category_axis</classname> &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name=""><paramtype><classname>category_axis</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>category_axis</classname> &amp;</type><parameter name="other"><paramtype>const <classname>category_axis</classname> &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type><classname>category_axis</classname> &amp;</type><parameter name=""><paramtype><classname>category_axis</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
</class><class name="integer_axis"><inherit access="public">boost::histogram::axis_with_label</inherit><description><para>An axis for a contiguous range of integers. There are no underflow/overflow bins for this axis. Binning is a O(1) operation. </para></description><typedef name="value_type"><type>int</type></typedef>
<method-group name="public member functions">
<method name="index" cv="const"><type>int</type><parameter name="x"><paramtype>int</paramtype></parameter><purpose>Returns the bin index for the passed argument. </purpose></method>
<method name="operator[]" cv="const"><type>int</type><parameter name="idx"><paramtype>int</paramtype></parameter><purpose>Returns the integer that is mapped to the bin index. </purpose></method>
<method name="operator==" cv="const"><type>bool</type><parameter name="o"><paramtype>const <classname>integer_axis</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor><parameter name="min"><paramtype>int</paramtype><description><para>smallest integer of the covered range </para></description></parameter><parameter name="max"><paramtype>int</paramtype><description><para>largest integer of the covered range </para></description></parameter><parameter name="label"><paramtype>const char *</paramtype><default>nullptr</default></parameter><parameter name="uoflow"><paramtype>bool</paramtype><default>true</default></parameter><description><para>Construct axis over consecutive sequence of integers</para><para>
</para></description></constructor>
<constructor/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>integer_axis</classname> &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name=""><paramtype><classname>integer_axis</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>integer_axis</classname> &amp;</type><parameter name=""><paramtype>const <classname>integer_axis</classname> &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type><classname>integer_axis</classname> &amp;</type><parameter name=""><paramtype><classname>integer_axis</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
</class><class name="polar_axis"><inherit access="public">boost::histogram::axis_with_label</inherit><inherit access="public">boost::histogram::real_axis&lt; polar_axis &gt;</inherit><description><para>Axis for real-valued angles</para><para>There are no overflow/underflow bins for this axis, since the axis is circular and wraps around after :math:<computeroutput>2 \pi</computeroutput>. Binning is a O(1) operation. </para></description><method-group name="public member functions">
<method name="index" cv="const"><type>int</type><parameter name="x"><paramtype>double</paramtype></parameter><purpose>Returns the bin index for the passed argument. </purpose></method>
<method name="operator[]" cv="const"><type>double</type><parameter name="idx"><paramtype>int</paramtype></parameter></method>
<method name="operator==" cv="const"><type>bool</type><parameter name="o"><paramtype>const <classname>polar_axis</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor specifiers="explicit"><parameter name="n"><paramtype>unsigned</paramtype><description><para>number of bins </para></description></parameter><parameter name="start"><paramtype>double</paramtype><default>0.0</default><description><para>starting phase of the angle </para></description></parameter><parameter name="label"><paramtype>const char *</paramtype><default>nullptr</default><description><para>description of the axis </para></description></parameter><description><para>Constructor 
</para></description></constructor>
<constructor/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>polar_axis</classname> &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name=""><paramtype><classname>polar_axis</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>polar_axis</classname> &amp;</type><parameter name=""><paramtype>const <classname>polar_axis</classname> &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type><classname>polar_axis</classname> &amp;</type><parameter name=""><paramtype><classname>polar_axis</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
</class><class name="real_axis"><template>
      <template-type-parameter name="Derived"/>
    </template><purpose>Mixin for real-valued axes. </purpose><typedef name="value_type"><type>double</type></typedef>
<method-group name="public member functions">
<method name="left" cv="const"><type>double</type><parameter name="idx"><paramtype>int</paramtype></parameter><purpose>Lower edge of the bin (left side) </purpose></method>
<method name="right" cv="const"><type>double</type><parameter name="idx"><paramtype>int</paramtype></parameter><purpose>Upper edge of the bin (right side) </purpose></method>
</method-group>
</class><class name="regular_axis"><inherit access="public">boost::histogram::axis_with_label</inherit><inherit access="public">boost::histogram::real_axis&lt; regular_axis &gt;</inherit><description><para>Axis for binning real-valued data into equidistant bins</para><para>This is the simplest and common binning strategy. Binning is a O(1) operation. </para></description><method-group name="public member functions">
<method name="index" cv="const"><type>int</type><parameter name="x"><paramtype>double</paramtype></parameter><purpose>Returns the bin index for the passed argument (optimized code). </purpose></method>
<method name="operator[]" cv="const"><type>double</type><parameter name="idx"><paramtype>int</paramtype></parameter></method>
<method name="operator==" cv="const"><type>bool</type><parameter name="o"><paramtype>const <classname>regular_axis</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor><parameter name="n"><paramtype>unsigned</paramtype><description><para>number of bins </para></description></parameter><parameter name="min"><paramtype>double</paramtype><description><para>low edge of first bin </para></description></parameter><parameter name="max"><paramtype>double</paramtype><description><para>high edge of last bin </para></description></parameter><parameter name="label"><paramtype>const char *</paramtype><default>nullptr</default><description><para>description of the axis </para></description></parameter><parameter name="uoflow"><paramtype>bool</paramtype><default>true</default><description><para>add underflow and overflow bins to the histogram for this axis or not </para></description></parameter><description><para>Constructor</para><para>
</para></description></constructor>
<constructor/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>regular_axis</classname> &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name=""><paramtype><classname>regular_axis</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>regular_axis</classname> &amp;</type><parameter name=""><paramtype>const <classname>regular_axis</classname> &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type><classname>regular_axis</classname> &amp;</type><parameter name=""><paramtype><classname>regular_axis</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
</class><class name="variable_axis"><inherit access="public">boost::histogram::axis_with_label</inherit><inherit access="public">boost::histogram::real_axis&lt; variable_axis &gt;</inherit><description><para>An axis for real-valued data and bins of varying width.</para><para>Binning is a O(log(N)) operation. If speed matters and the problem domain allows it, prefer a <classname alt="boost::histogram::regular_axis">regular_axis</classname>. </para></description><method-group name="public member functions">
<method name="index" cv="const"><type>int</type><parameter name="x"><paramtype>double</paramtype></parameter></method>
<method name="operator[]" cv="const"><type>double</type><parameter name="idx"><paramtype>int</paramtype></parameter></method>
<method name="operator==" cv="const"><type>bool</type><parameter name="o"><paramtype>const <classname>variable_axis</classname> &amp;</paramtype></parameter></method>
</method-group>
<constructor specifiers="explicit"><parameter name="x"><paramtype>const std::initializer_list&lt; double &gt; &amp;</paramtype><description><para>sequence of bin edges </para></description></parameter><parameter name="label"><paramtype>const char *</paramtype><default>nullptr</default><description><para>description of the axis </para></description></parameter><parameter name="uoflow"><paramtype>bool</paramtype><default>true</default><description><para>add under-/overflow bins for this axis or not </para></description></parameter><description><para>Constructor</para><para>
</para></description></constructor>
<constructor><parameter name="x"><paramtype>const std::vector&lt; double &gt; &amp;</paramtype></parameter><parameter name="label"><paramtype>const char *</paramtype><default>nullptr</default></parameter><parameter name="uoflow"><paramtype>bool</paramtype><default>true</default></parameter></constructor>
<constructor><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter><parameter name="label"><paramtype>const char *</paramtype><default>nullptr</default></parameter><parameter name="uoflow"><paramtype>bool</paramtype><default>true</default></parameter></constructor>
<constructor cv="= default"/>
<constructor><parameter name="o"><paramtype>const <classname>variable_axis</classname> &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name=""><paramtype><classname>variable_axis</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>variable_axis</classname> &amp;</type><parameter name="o"><paramtype>const <classname>variable_axis</classname> &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type><classname>variable_axis</classname> &amp;</type><parameter name=""><paramtype><classname>variable_axis</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
</class><typedef name="default_axes"><type>mpl::vector&lt; <classname>regular_axis</classname>, <classname>polar_axis</classname>, <classname>variable_axis</classname>, <classname>category_axis</classname>, <classname>integer_axis</classname> &gt;::type</type></typedef>
































</namespace>
</namespace>
</header>
<header name="boost/histogram/axis_ostream_operators.hpp">
<namespace name="boost">
<namespace name="histogram">
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>regular_axis</classname> &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>polar_axis</classname> &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>variable_axis</classname> &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>integer_axis</classname> &amp;</paramtype></parameter></function>
<function name="operator&lt;&lt;"><type>std::ostream &amp;</type><parameter name="os"><paramtype>std::ostream &amp;</paramtype></parameter><parameter name="a"><paramtype>const <classname>category_axis</classname> &amp;</paramtype></parameter></function>



























</namespace>
</namespace>
</header>
<header name="boost/histogram/dynamic_histogram.hpp">
<namespace name="boost">
<namespace name="histogram">
<class name="dynamic_histogram"><template>
      <template-type-parameter name="Axes"><default>default_axes</default></template-type-parameter>
      <template-type-parameter name="Storage"><default><classname alt="boost::histogram::adaptive_storage">adaptive_storage</classname>&lt;&gt;</default></template-type-parameter>
    </template><typedef name="axis_type"><type>typename make_variant_over&lt; Axes &gt;::type</type></typedef>
<typedef name="axes_type"><type>std::vector&lt; axis_type &gt;</type></typedef>
<typedef name="value_type"><type>typename Storage::value_type</type></typedef>
<method-group name="public member functions">
<method name="operator==" cv="const"><type>bool</type><template>
          <template-type-parameter name="OtherAxes"/>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype>const <classname>dynamic_histogram</classname>&lt; OtherAxes, OtherStorage &gt; &amp;</paramtype></parameter></method>
<method name="operator+="><type><classname>dynamic_histogram</classname> &amp;</type><template>
          <template-nontype-parameter name="Histogram"><type>template&lt; class, class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="OtherAxes"/>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype>const Histogram&lt; OtherAxes, OtherStorage &gt; &amp;</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-nontype-parameter name="Values"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="values"><paramtype>Values...</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-type-parameter name="Sequence"/>
          <template-type-parameter name=""><default>detail::is_sequence&lt;Sequence&gt;</default></template-type-parameter>
        </template><parameter name="values"><paramtype>const Sequence &amp;</paramtype></parameter></method>
<method name="wfill"><type>void</type><template>
          <template-nontype-parameter name="Values"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="w"><paramtype>double</paramtype></parameter><parameter name="values"><paramtype>Values...</paramtype></parameter></method>
<method name="wfill"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="w"><paramtype>double</paramtype></parameter><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="wfill"><type>void</type><template>
          <template-type-parameter name="Sequence"/>
          <template-type-parameter name=""><default>detail::is_sequence&lt;Sequence&gt;</default></template-type-parameter>
        </template><parameter name="w"><paramtype>double</paramtype></parameter><parameter name="values"><paramtype>const Sequence &amp;</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><template>
          <template-nontype-parameter name="Indices"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="indices"><paramtype>Indices...</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><template>
          <template-type-parameter name="Sequence"/>
          <template-type-parameter name=""><default>detail::is_sequence&lt;Sequence&gt;</default></template-type-parameter>
        </template><parameter name="indices"><paramtype>const Sequence &amp;</paramtype></parameter></method>
<method name="variance" cv="const"><type>value_type</type><template>
          <template-nontype-parameter name="Indices"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="indices"><paramtype>Indices...</paramtype></parameter></method>
<method name="variance" cv="const"><type>value_type</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="variance" cv="const"><type>value_type</type><template>
          <template-type-parameter name="Sequence"/>
          <template-type-parameter name=""><default>detail::is_sequence&lt;Sequence&gt;</default></template-type-parameter>
        </template><parameter name="indices"><paramtype>const Sequence &amp;</paramtype></parameter></method>
<method name="dim" cv="const"><type>unsigned</type><purpose>Number of axes (dimensions) of histogram. </purpose></method>
<method name="size" cv="const"><type>std::size_t</type><purpose>Total number of bins in the histogram (including underflow/overflow) </purpose></method>
<method name="sum" cv="const"><type>double</type><purpose>Sum of all counts in the histogram. </purpose></method>
<method name="axis" cv="const"><type>const axis_type &amp;</type><parameter name="i"><paramtype>unsigned</paramtype><default>0</default></parameter><purpose>Return axis <emphasis>i</emphasis>. </purpose></method>
<method name="axis" cv="const"><type>const axis_type &amp;</type><template>
          <template-nontype-parameter name="N"><type>unsigned</type><default>0u</default></template-nontype-parameter>
        </template><purpose>Return axis <emphasis>i</emphasis> (added for conformity with <classname alt="boost::histogram::static_histogram">static_histogram</classname> interface) </purpose></method>
</method-group>
<constructor cv="= default"/>
<constructor specifiers="explicit"><template>
          <template-nontype-parameter name="Axes1"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axes"><paramtype>const Axes1 &amp;...</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="axes_begin"><paramtype>Iterator</paramtype></parameter><parameter name="axes_end"><paramtype>Iterator</paramtype></parameter></constructor>
<constructor specifiers="explicit"><parameter name="axes"><paramtype>const axes_type &amp;</paramtype></parameter></constructor>
<constructor specifiers="explicit"><parameter name="axes"><paramtype>axes_type &amp;&amp;</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="OtherAxes"/>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype>const <classname>dynamic_histogram</classname>&lt; OtherAxes, OtherStorage &gt; &amp;</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="OtherAxes"/>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype><classname>dynamic_histogram</classname>&lt; OtherAxes, OtherStorage &gt; &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>dynamic_histogram</classname> &amp;</type><template>
          <template-type-parameter name="OtherAxes"/>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype>const <classname>dynamic_histogram</classname>&lt; OtherAxes, OtherStorage &gt; &amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type><classname>dynamic_histogram</classname> &amp;</type><template>
          <template-type-parameter name="OtherAxes"/>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype><classname>dynamic_histogram</classname>&lt; OtherAxes, OtherStorage &gt; &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="field_count" cv="const"><type>std::size_t</type></method>
<method name="axes_equal_to" cv="const"><type>bool</type><template>
          <template-type-parameter name="OtherAxes"/>
        </template><parameter name="other_axes"><paramtype>const OtherAxes &amp;</paramtype></parameter></method>
<method name="index_impl" cv="const"><type>void</type><template>
          <template-type-parameter name="Linearize"/>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="lin"><paramtype>Linearize &amp;</paramtype></parameter><parameter name="first"><paramtype>First</paramtype></parameter><parameter name="rest"><paramtype>Rest...</paramtype></parameter></method>
<method name="index_impl" cv="const"><type>void</type><template>
          <template-type-parameter name="Linearize"/>
        </template><parameter name=""><paramtype>Linearize &amp;</paramtype></parameter></method>
<method name="iter_args_impl" cv="const"><type>void</type><template>
          <template-type-parameter name="Linearize"/>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="lin"><paramtype>Linearize &amp;</paramtype></parameter><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
</method-group>
</class>




<function name="make_dynamic_histogram"><type><classname>dynamic_histogram</classname></type><template>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axes"><paramtype>const Axes &amp;...</paramtype></parameter></function>
<function name="make_dynamic_histogram_with"><type><classname>dynamic_histogram</classname>&lt; default_axes, Storage &gt;</type><template>
          <template-type-parameter name="Storage"/>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axes"><paramtype>const Axes &amp;...</paramtype></parameter></function>

























</namespace>
</namespace>
</header>
<header name="boost/histogram/serialization.hpp">
<para>Defines the serialization functions, to use with boost.serialize. </para><namespace name="boost">
<namespace name="histogram">







<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
          <template-type-parameter name="Container"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="store"><paramtype><classname>container_storage</classname>&lt; Container &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>
<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="base"><paramtype><classname>axis_with_label</classname> &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>
<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="axis"><paramtype><classname>regular_axis</classname> &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>
<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="axis"><paramtype><classname>polar_axis</classname> &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>
<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="axis"><paramtype><classname>variable_axis</classname> &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>
<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="axis"><paramtype><classname>integer_axis</classname> &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>
<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="axis"><paramtype><classname>category_axis</classname> &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>
<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
          <template-type-parameter name="Storage"/>
          <template-type-parameter name="Axes"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="h"><paramtype><classname>static_histogram</classname>&lt; Storage, Axes &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>
<function name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
          <template-type-parameter name="Storage"/>
          <template-type-parameter name="Axes"/>
        </template><parameter name="ar"><paramtype>Archive &amp;</paramtype></parameter><parameter name="h"><paramtype><classname>dynamic_histogram</classname>&lt; Storage, Axes &gt; &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></function>
















</namespace>
</namespace>
</header>
<header name="boost/histogram/static_histogram.hpp">
<namespace name="boost">
<namespace name="histogram">
<class name="static_histogram"><template>
      <template-type-parameter name="Axes"/>
      <template-type-parameter name="Storage"><default><classname alt="boost::histogram::adaptive_storage">adaptive_storage</classname>&lt;&gt;</default></template-type-parameter>
    </template><struct name="field_counter"><data-member name="value" specifiers="mutable"><type>std::size_t</type></data-member>
<method-group name="public member functions">
<method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="t"><paramtype>const T &amp;</paramtype></parameter></method>
</method-group>
</struct><struct name="iter_args_impl"><template>
      <template-type-parameter name="Linearize"/>
      <template-type-parameter name="Iterator"/>
      <template-nontype-parameter name="N"><type>unsigned</type><default>0</default></template-nontype-parameter>
    </template><method-group name="public static functions">
<method name="apply" specifiers="static"><type>void</type><parameter name="lin"><paramtype>Linearize &amp;</paramtype></parameter><parameter name="axes"><paramtype>const axes_type &amp;</paramtype></parameter><parameter name="iter"><paramtype>Iterator</paramtype></parameter></method>
</method-group>
</struct><struct-specialization name="iter_args_impl"><template>
      <template-type-parameter name="Linearize"/>
      <template-type-parameter name="Iterator"/>
    </template><specialization><template-arg>Linearize</template-arg><template-arg>Iterator</template-arg><template-arg>dim()</template-arg></specialization><method-group name="public static functions">
<method name="apply" specifiers="static"><type>void</type><parameter name=""><paramtype>Linearize &amp;</paramtype></parameter><parameter name=""><paramtype>const axes_type &amp;</paramtype></parameter><parameter name=""><paramtype>Iterator</paramtype></parameter></method>
</method-group>
</struct-specialization><typedef name="axes_type"><type>typename fusion::result_of::as_vector&lt; Axes &gt;::type</type></typedef>
<typedef name="value_type"><type>typename Storage::value_type</type></typedef>
<method-group name="public member functions">
<method name="operator==" cv="const"><type>bool</type><template>
          <template-type-parameter name="OtherAxes"/>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype>const <classname>static_histogram</classname>&lt; OtherAxes, OtherStorage &gt; &amp;</paramtype></parameter></method>
<method name="operator+="><type><classname>static_histogram</classname> &amp;</type><template>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype>const <classname>static_histogram</classname>&lt; Axes, OtherStorage &gt; &amp;</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-nontype-parameter name="Values"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="values"><paramtype>Values...</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="fill"><type>void</type><template>
          <template-type-parameter name="Sequence"/>
          <template-type-parameter name=""><default>detail::is_sequence&lt;Sequence&gt;</default></template-type-parameter>
        </template><parameter name="values"><paramtype>const Sequence &amp;</paramtype></parameter></method>
<method name="wfill"><type>void</type><template>
          <template-nontype-parameter name="Values"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="w"><paramtype>double</paramtype></parameter><parameter name="values"><paramtype>Values...</paramtype></parameter></method>
<method name="wfill"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="w"><paramtype>double</paramtype></parameter><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="wfill"><type>void</type><template>
          <template-type-parameter name="Sequence"/>
          <template-type-parameter name=""><default>detail::is_sequence&lt;Sequence&gt;</default></template-type-parameter>
        </template><parameter name="w"><paramtype>double</paramtype></parameter><parameter name="values"><paramtype>const Sequence &amp;</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><template>
          <template-nontype-parameter name="Args"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="args"><paramtype>Args...</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><template>
          <template-type-parameter name="Sequence"/>
          <template-type-parameter name=""><default>detail::is_sequence&lt;Sequence&gt;</default></template-type-parameter>
        </template><parameter name="indices"><paramtype>const Sequence &amp;</paramtype></parameter></method>
<method name="variance" cv="const"><type>value_type</type><template>
          <template-nontype-parameter name="Indices"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="indices"><paramtype>Indices...</paramtype></parameter></method>
<method name="variance" cv="const"><type>value_type</type><template>
          <template-type-parameter name="Iterator"/>
          <template-type-parameter name=""><default>detail::is_iterator&lt;Iterator&gt;</default></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter></method>
<method name="variance" cv="const"><type>value_type</type><template>
          <template-type-parameter name="Sequence"/>
          <template-type-parameter name=""><default>detail::is_sequence&lt;Sequence&gt;</default></template-type-parameter>
        </template><parameter name="indices"><paramtype>const Sequence &amp;</paramtype></parameter></method>
<method name="size" cv="const"><type>std::size_t</type><purpose>Total number of bins in the histogram (including underflow/overflow) </purpose></method>
<method name="sum" cv="const"><type>double</type><purpose>Sum of all counts in the histogram. </purpose></method>
<method name="axis" cv="const"><type>std::add_const&lt; typename fusion::result_of::value_at_c&lt; axes_type, N &gt;::type &gt;::type &amp;</type><template>
          <template-nontype-parameter name="N"><type>unsigned</type><default>0</default></template-nontype-parameter>
        </template></method>
</method-group>
<constructor cv="= default"/>
<constructor specifiers="explicit"><template>
          <template-nontype-parameter name="Axes1"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axes"><paramtype>const Axes1 &amp;...</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name="other"><paramtype>const <classname>static_histogram</classname> &amp;</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name="other"><paramtype><classname>static_histogram</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>static_histogram</classname> &amp;</type><parameter name="other"><paramtype>const <classname>static_histogram</classname> &amp;</paramtype></parameter></copy-assignment>
<copy-assignment cv="= default"><type><classname>static_histogram</classname> &amp;</type><parameter name="other"><paramtype><classname>static_histogram</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor><template>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype>const <classname>static_histogram</classname>&lt; Axes, OtherStorage &gt; &amp;</paramtype></parameter></constructor>
<constructor><template>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype><classname>static_histogram</classname>&lt; Axes, OtherStorage &gt; &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>static_histogram</classname> &amp;</type><template>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype>const <classname>static_histogram</classname>&lt; Axes, OtherStorage &gt; &amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type><classname>static_histogram</classname> &amp;</type><template>
          <template-type-parameter name="OtherStorage"/>
        </template><parameter name="other"><paramtype><classname>static_histogram</classname>&lt; Axes, OtherStorage &gt; &amp;&amp;</paramtype></parameter></copy-assignment>
<method-group name="public static functions">
<method name="dim" specifiers="static"><type>constexpr unsigned</type><purpose>Number of axes (dimensions) of histogram. </purpose></method>
</method-group>
<method-group name="private member functions">
<method name="field_count" cv="const"><type>std::size_t</type></method>
<method name="axes_equal_to" cv="const"><type>bool</type><template>
          <template-type-parameter name="OtherAxes"/>
        </template><parameter name=""><paramtype>const OtherAxes &amp;</paramtype></parameter></method>
<method name="axes_equal_to" cv="const"><type>bool</type><parameter name="other_axes"><paramtype>const axes_type &amp;</paramtype></parameter></method>
<method name="index_impl" cv="const"><type>void</type><template>
          <template-type-parameter name="Linearize"/>
          <template-type-parameter name="First"/>
          <template-nontype-parameter name="Rest"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="lin"><paramtype>Linearize &amp;</paramtype></parameter><parameter name="first"><paramtype>First</paramtype></parameter><parameter name="rest"><paramtype>Rest...</paramtype></parameter></method>
<method name="index_impl" cv="const"><type>void</type><template>
          <template-type-parameter name="Linearize"/>
        </template><parameter name=""><paramtype>Linearize &amp;</paramtype></parameter></method>
</method-group>
</class>















<function name="make_static_histogram"><type><classname>static_histogram</classname>&lt; mpl::vector&lt; Axes... &gt; &gt;</type><template>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axes"><paramtype>const Axes &amp;...</paramtype></parameter><purpose>default static type factory </purpose></function>
<function name="make_static_histogram_with"><type><classname>static_histogram</classname>&lt; mpl::vector&lt; Axes... &gt;, Storage &gt;</type><template>
          <template-type-parameter name="Storage"/>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="axes"><paramtype>const Axes &amp;...</paramtype></parameter><purpose>static type factory with variable storage type </purpose></function>














</namespace>
</namespace>
</header>
<header name="boost/histogram/storage/adaptive_storage.hpp">
<namespace name="boost">
<namespace name="histogram">
<class name="adaptive_storage"><template>
      <template-nontype-parameter name="Allocator"><type>template&lt; class &gt; class</type><default>std::allocator</default></template-nontype-parameter>
    </template><typedef name="value_type"><type>double</type></typedef>
<method-group name="public member functions">
<method name="size" cv="const"><type>std::size_t</type></method>
<method name="increase"><type>void</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="increase"><type>void</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter><parameter name="w"><paramtype>double</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="variance" cv="const"><type>value_type</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="operator+="><type><classname>adaptive_storage</classname> &amp;</type><template>
          <template-nontype-parameter name="Allocator1"><type>template&lt; class &gt; class</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>const <classname>adaptive_storage</classname>&lt; Allocator1 &gt; &amp;</paramtype></parameter></method>
<method name="operator+="><type><classname>adaptive_storage</classname> &amp;</type><template>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""><default>detail::is_storage&lt;OtherStorage&gt;</default></template-type-parameter>
        </template><parameter name="other"><paramtype>const OtherStorage &amp;</paramtype></parameter></method>
<method name="operator==" cv="const"><type>bool</type><template>
          <template-nontype-parameter name="Allocator1"><type>template&lt; class &gt; class</type></template-nontype-parameter>
        </template><parameter name=""><paramtype>const <classname>adaptive_storage</classname>&lt; Allocator1 &gt; &amp;</paramtype></parameter></method>
<method name="operator==" cv="const"><type>bool</type><template>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""><default>detail::is_not_adaptive_storage&lt;OtherStorage&gt;</default></template-type-parameter>
        </template><parameter name="other"><paramtype>const OtherStorage &amp;</paramtype></parameter></method>
<method name="operator+="><type><classname>adaptive_storage</classname>&lt; Allocator &gt; &amp;</type><template>
          <template-nontype-parameter name="OtherAllocator"><type>template&lt; class &gt; class</type></template-nontype-parameter>
        </template><parameter name="o"><paramtype>const <classname>adaptive_storage</classname>&lt; OtherAllocator &gt; &amp;</paramtype></parameter></method>
<method name="operator+="><type><classname>adaptive_storage</classname>&lt; Allocator &gt; &amp;</type><template>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""/>
        </template><parameter name="other"><paramtype>const OtherStorage &amp;</paramtype></parameter></method>
</method-group>
<constructor specifiers="explicit"><parameter name="s"><paramtype>std::size_t</paramtype></parameter></constructor>
<constructor cv="= default"/>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>adaptive_storage</classname> &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>adaptive_storage</classname> &amp;</type><parameter name=""><paramtype>const <classname>adaptive_storage</classname> &amp;</paramtype></parameter></copy-assignment>
<constructor cv="= default"><parameter name=""><paramtype><classname>adaptive_storage</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>adaptive_storage</classname> &amp;</type><parameter name=""><paramtype><classname>adaptive_storage</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor><template>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""><default>detail::is_standard_integral&lt;typename OtherStorage::value_type&gt;</default></template-type-parameter>
        </template><parameter name="o"><paramtype>const OtherStorage &amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>adaptive_storage</classname> &amp;</type><template>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""><default>detail::is_standard_integral&lt;typename OtherStorage::value_type&gt;</default></template-type-parameter>
        </template><parameter name="o"><paramtype>const OtherStorage &amp;</paramtype></parameter></copy-assignment>
<copy-assignment><type><classname>adaptive_storage</classname>&lt; Allocator &gt; &amp;</type><template>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""/>
        </template><parameter name="o"><paramtype>const OtherStorage &amp;</paramtype></parameter></copy-assignment>
<method-group name="private member functions">
<method name="serialize"><type>void</type><template>
          <template-type-parameter name="Archive"/>
        </template><parameter name=""><paramtype>Archive &amp;</paramtype></parameter><parameter name=""><paramtype>unsigned</paramtype></parameter></method>
</method-group>
</class>





























<function name="operator=="><type>bool</type><template>
          <template-nontype-parameter name="Allocator"><type>template&lt; class &gt; class</type></template-nontype-parameter>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""><default>detail::is_not_adaptive_storage&lt;OtherStorage&gt;</default></template-type-parameter>
        </template><parameter name="a"><paramtype>const OtherStorage &amp;</paramtype></parameter><parameter name="b"><paramtype>const <classname>adaptive_storage</classname>&lt; Allocator &gt; &amp;</paramtype></parameter></function>

</namespace>
<namespace name="serialization">
</namespace>
</namespace>
</header>
<header name="boost/histogram/storage/container_storage.hpp">
<namespace name="boost">
<namespace name="histogram">
<class name="container_storage"><template>
      <template-type-parameter name="Container"/>
    </template><typedef name="value_type"><type>typename Container::value_type</type></typedef>
<method-group name="public member functions">
<method name="size" cv="const"><type>std::size_t</type></method>
<method name="increase"><type>void</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="value" cv="const"><type>value_type</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="variance" cv="const"><type>value_type</type><parameter name="i"><paramtype>std::size_t</paramtype></parameter></method>
<method name="operator+="><type>void</type><template>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""><default>detail::is_storage&lt;OtherStorage&gt;</default></template-type-parameter>
        </template><parameter name="other"><paramtype>const OtherStorage &amp;</paramtype></parameter></method>
</method-group>
<constructor/>
<constructor specifiers="explicit"><parameter name="s"><paramtype>std::size_t</paramtype></parameter></constructor>
<constructor cv="= default"><parameter name=""><paramtype>const <classname>container_storage</classname> &amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>container_storage</classname> &amp;</type><parameter name=""><paramtype>const <classname>container_storage</classname> &amp;</paramtype></parameter></copy-assignment>
<constructor cv="= default"><parameter name=""><paramtype><classname>container_storage</classname> &amp;&amp;</paramtype></parameter></constructor>
<copy-assignment cv="= default"><type><classname>container_storage</classname> &amp;</type><parameter name=""><paramtype><classname>container_storage</classname> &amp;&amp;</paramtype></parameter></copy-assignment>
<constructor><template>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""><default>detail::is_storage&lt;OtherStorage&gt;</default></template-type-parameter>
        </template><parameter name="other"><paramtype>const OtherStorage &amp;</paramtype></parameter></constructor>
<copy-assignment><type><classname>container_storage</classname> &amp;</type><template>
          <template-type-parameter name="OtherStorage"/>
          <template-type-parameter name=""><default>detail::is_storage&lt;OtherStorage&gt;</default></template-type-parameter>
        </template><parameter name="other"><paramtype>const OtherStorage &amp;</paramtype></parameter></copy-assignment>
</class>






























<function name="operator=="><type>bool</type><template>
          <template-type-parameter name="Container1"/>
          <template-type-parameter name="Container2"/>
        </template><parameter name="a"><paramtype>const <classname>container_storage</classname>&lt; Container1 &gt; &amp;</paramtype></parameter><parameter name="b"><paramtype>const <classname>container_storage</classname>&lt; Container2 &gt; &amp;</paramtype></parameter></function>
</namespace>
</namespace>
</header>
<header name="boost/histogram/utility.hpp">
<namespace name="boost">
<namespace name="histogram">


















<function name="bins"><type>int</type><template>
          <template-type-parameter name="A"/>
        </template><parameter name="a"><paramtype>const A &amp;</paramtype></parameter></function>
<function name="bins"><type>int</type><template>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="a"><paramtype>const boost::variant&lt; Axes... &gt; &amp;</paramtype></parameter></function>
<function name="shape"><type>int</type><template>
          <template-type-parameter name="A"/>
        </template><parameter name="a"><paramtype>const A &amp;</paramtype></parameter></function>
<function name="shape"><type>int</type><template>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="a"><paramtype>const boost::variant&lt; Axes... &gt; &amp;</paramtype></parameter></function>
<function name="index"><type>int</type><template>
          <template-type-parameter name="A"/>
          <template-type-parameter name="V"/>
        </template><parameter name="a"><paramtype>const A &amp;</paramtype></parameter><parameter name="v"><paramtype>const V</paramtype></parameter></function>
<function name="index"><type>int</type><template>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
          <template-type-parameter name="V"/>
        </template><parameter name="a"><paramtype>const boost::variant&lt; Axes... &gt; &amp;</paramtype></parameter><parameter name="v"><paramtype>const V</paramtype></parameter></function>
<function name="left"><type>double</type><template>
          <template-type-parameter name="A"/>
        </template><parameter name="a"><paramtype>const A &amp;</paramtype></parameter><parameter name="i"><paramtype>const int</paramtype></parameter></function>
<function name="left"><type>double</type><template>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="a"><paramtype>const boost::variant&lt; Axes... &gt; &amp;</paramtype></parameter><parameter name="i"><paramtype>const int</paramtype></parameter></function>
<function name="right"><type>double</type><template>
          <template-type-parameter name="A"/>
        </template><parameter name="a"><paramtype>const A &amp;</paramtype></parameter><parameter name="i"><paramtype>const int</paramtype></parameter></function>
<function name="right"><type>double</type><template>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="a"><paramtype>const boost::variant&lt; Axes... &gt; &amp;</paramtype></parameter><parameter name="i"><paramtype>const int</paramtype></parameter></function>
<function name="center"><type>double</type><template>
          <template-type-parameter name="A"/>
        </template><parameter name="a"><paramtype>const A &amp;</paramtype></parameter><parameter name="i"><paramtype>const int</paramtype></parameter></function>
<function name="center"><type>double</type><template>
          <template-nontype-parameter name="Axes"><type>typename...</type></template-nontype-parameter>
        </template><parameter name="a"><paramtype>const boost::variant&lt; Axes... &gt; &amp;</paramtype></parameter><parameter name="i"><paramtype>const int</paramtype></parameter></function>


</namespace>
</namespace>
</header>
</library-reference>